knitr::opts_chunk$set(echo = TRUE)
volume <- read.csv("http://www.razer.net.br/datasets/Volumes.csv", sep=";", dec=",")
head(volume)
dados <- read.csv("http://www.razer.net.br/datasets/Volumes.csv", sep=";", dec=",")
head(dados)
dados$NR <- null
dados$NR <- NULL
regression.indices <- createDataPartition(dados$VOL, p=0.8, list=F)
regression.indices <- createDataPartition(dados$VOL, p=0.8, list=F)
regression.indices <- caret::createDataPartition(dados$VOL, p=0.8, list=F)
regresssion.treino <- dados[regression.indices, ]
regression.teste <- dados[-regression.indices, ]
regression.rf <- train(VOL ~ ., data=regression.treino, method="rf")
regression.rf <- caret::train(VOL ~ ., data=regression.treino, method="rf")
regression.indices <- caret::createDataPartition(dados$VOL, p=0.8, list=F)
regression.treino <- dados[regression.indices, ]
regression.teste <- dados[-regression.indices, ]
regression.rf <- caret::train(VOL ~ ., data=regression.treino, method="rf")
regression.svm <- caret::train(VOL ~ ., data=regression.treino, method="svmRadial")
regression.rna <- caret::train(VOL ~ ., data=regression.treino, method="nnet", trace=F)
set.seed(7)
alom.indices <- createDataPartition(dados$VOL, p=0.8, list=F)
alom.treino <- dados[alom.indices,]
alom.teste <- dados[-alom.indices,]
alom <- nls(VOl ~ b0 + b1*DAP*DAP*HT, data=alom.treino, start=list(b0=0.5, b1=0.5))
alom <- nls(VOL ~ b0 + b1*DAP*DAP*HT, data=alom.treino, start=list(b0=0.5, b1=0.5))
predict.regression.rf <- predict(regression.rf, regression.teste)
predict.regression.svm <- predict(regression.svm, regression.teste)
predict.regression.rna <- predict(regression.rna, regression.teste)
Syx <- function(reals, predicteds, n) {
return (sqrt(sum((reals - predicteds)^2)/(n - 2)))
}
SxyPercent <- function(reals, predicteds) {
return ((Sxy(reals, predicteds)/mean(y))*100)
}
R2 <- function (reals, predicteds) {
return (sqrt(1 - sum((reals - predicteds)^2)/sum((reals - mean(reals))^2)))
}
R2(regression.teste, predict.regression.rf)
print(reals)
print(regression.teste)
print(predict.regression.rf)
R2(regression.teste, predict.regression.rf)
#print(regression.teste)
print(predict.regression.rf)
R2(regression.teste$VOL, predict.regression.rf)
#print(regression.teste)
print(predict.regression.rf)
R2(regression.teste$VOL, predict.regression.rf)
R2(regression.teste$VOL, predict.regression.rf)
Syx(regression.teste$VOL, predict.regression.rf)
n <- nrow(regression.teste)
Syx(regression.teste$VOL, predict.regression.rf, n)
SxyPercent(regression.teste$VOL, predict.regression.rf)
SyxPercent <- function(reals, predicteds) {
return ((Syx(reals, predicteds)/mean(y))*100)
}
R2 <- function (reals, predicteds) {
return (sqrt(1 - sum((reals - predicteds)^2)/sum((reals - mean(reals))^2)))
}
SyxPercent(regression.teste$VOL, predict.regression.rf)
n <- nrow(regression.teste)
SyxPercent(regression.teste$VOL, predict.regression.rf, n)
SyxPercent <- function(reals, predicteds, n) {
return ((Syx(reals, predicteds, n)/mean(y))*100)
}
n <- nrow(regression.teste)
SyxPercent(regression.teste$VOL, predict.regression.rf, n)
SyxPercent <- function(reals, predicteds, n) {
return ((Syx(reals, predicteds, n)/mean(reals))*100)
}
n <- nrow(regression.teste)
SyxPercent(regression.teste$VOL, predict.regression.rf, n)
knitr::opts_chunk$set(echo = TRUE)
# instalar o pacotes necessários
install.packages("mlbench", repos = "http://cran.us.r-project.org")
install.packages("e1017")
install.packages("randomForest")
install.packages("kernlab")
install.packages("caret")
# usar os pacotes necessários
library(mlbench)
library(caret)
# carregar os dados Satellite
data(Satellite)
# exibir estrutura dos dados Satellite
str(Satellite)
# apresentar alguma medidas estatísticas do dados Satellite
summary(Satellite)
# exibir alguns dados do Satellite
head(Satellite, n = 6)
# particionar em 80% para treino e 20% para teste
set.seed(7)
indices <- createDataPartition(Satellite$classes, p=0.8, list=F)
treino <- Satellite[indices, ]
teste <- Satellite[-indices, ]
# treinar modelos RandomForest, SVM e RNA
rf <- train(classes ~ ., data=treino, method="rf")
